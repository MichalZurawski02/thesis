include("suguru_solver.jl")
include("suguru_generator.jl")
using .SuguruSolver

size = 1


suguru4x4 = [
    Set([(1, 1), (1, 2, 2), (2, 2)]),
    Set([(2, 1), (3, 1), (4, 1, 3), (4, 2)]),
    Set([(1, 3), (1, 4), (2, 3), (2, 4)]),
    Set([(3, 2), (3, 3), (3, 4, 2), (4, 3, 4), (4, 4, 1)])
]

solution4x4 = [
    "3" "2" "3" "2"; 
    "4" "1" "4" "1"; 
    "2" "5" "3" "2"; 
    "3" "1" "4" "1"
]

grid4x4, backtracking_counter, time = SuguruSolver.solve(suguru4x4, 4, 4, false)
@assert solution4x4 == grid4x4

for i in 1:size
    grid4x4, backtracking_counter, time = SuguruSolver.solve(suguru4x4, 4, 4, false)
    println(backtracking_counter, "; ", time)
end
println()




suguru6x6 = [
    Set([(1, 1, 3), (1, 2), (2, 1), (2, 2), (2, 3)]),
    Set([(1, 3), (1, 4), (2, 4), (2, 5), (3, 5)]),
    Set([(1, 5), (1, 6, 1), (2, 6, 3), (3, 6), (4, 6)]),
    Set([(3, 1), (3, 2), (4, 2), (4, 3), (5, 3)]),
    Set([(3, 3), (3, 4), (4, 4), (4, 5, 5), (5, 5)]),
    Set([(5, 6)]),
    Set([(4, 1), (5, 1), (5, 2), (6, 1, 2), (6, 2)]),
    Set([(6, 3), (6, 4, 2), (5, 4), (6, 5, 4), (6, 6)])
]

solution6x6 = [
    "3" "1" "5" "4" "5" "1"; 
    "5" "4" "2" "3" "2" "3"; 
    "1" "3" "1" "4" "1" "4"; 
    "4" "2" "5" "2" "5" "2"; 
    "3" "1" "4" "1" "3" "1"; 
    "2" "5" "3" "2" "4" "5"
]

# grid6x6, backtracking_counter, time = SuguruSolver.solve(suguru6x6, 6, 6, false)
# @assert solution6x6 == grid6x6

for i in 1:size
    grid6x6, backtracking_counter, time = SuguruSolver.solve(suguru6x6, 6, 6, false)
    println(backtracking_counter, "; ", time)
end
println()



suguru8x8 = [
    Set([(1, 1), (1, 2, 1), (1, 3), (2, 1)]),
    Set([(1, 4), (1, 5), (2, 4), (3, 4), (4, 4)]),
    Set([(1, 6), (1, 7), (2, 5), (2, 6, 3), (3, 5, 5)]),
    Set([(1, 8, 3), (2, 7, 5), (2, 8), (3, 7), (3, 8)]),
    Set([(3, 1, 2), (4, 1), (2, 2), (3, 2), (2, 3)]),
    Set([(3, 3)]),
    Set([(5, 1, 5), (6, 1), (4, 2), (5, 2), (4, 3)]),
    Set([(6, 2), (7, 2), (5, 3), (6, 3), (5, 4)]),
    Set([(6, 4), (6, 5), (5, 5), (7, 5)]),
    Set([(4, 5), (4, 6), (3, 6)]),
    Set([(4, 7), (4, 8), (5, 6), (6, 6, 4), (5, 7)]),
    Set([(7, 6), (7, 7, 1), (6, 7), (6, 8), (5, 8)]),
    Set([(8, 5), (8, 6), (8, 7), (8, 8), (7, 8, 4)]),
    Set([(7, 3), (7, 4)]),
    Set([(7, 1, 5), (8, 1), (8, 2), (8, 3), (8, 4)]),
]

solution8x8 = [
    "2" "1" "3" "1" "5" "1" "2" "3"; 
    "4" "5" "4" "2" "4" "3" "5" "1"; 
    "2" "3" "1" "3" "5" "2" "4" "2"; 
    "1" "4" "2" "4" "1" "3" "1" "3"; 
    "5" "3" "1" "3" "2" "5" "2" "4"; 
    "1" "2" "5" "4" "1" "4" "3" "5"; 
    "5" "4" "1" "2" "3" "2" "1" "4"; 
    "1" "2" "3" "4" "1" "5" "3" "2"
]

# grid8x8, backtracking_counter, time = SuguruSolver.solve(suguru8x8, 8, 8, false)
# @assert solution8x8 == grid8x8

for i in 1:size
    grid8x8, backtracking_counter, time = SuguruSolver.solve(suguru8x8, 8, 8, false)
    println(backtracking_counter, "; ", time)
end
println()


suguru7x9  = [
    Set([(1, 1, 1), (1, 2), (2, 1), (2, 2, 2), (3, 1, 4)]),
    Set([(1, 3), (1, 4, 1), (1, 5), (2, 3), (2, 4)]),
    Set([(1, 6), (1, 7), (2, 5), (2, 6), (3, 5)]),
    Set([(1, 8), (2, 7), (2, 8, 3), (3, 6), (3, 7)]),
    Set([(1, 9), (2, 9), (3, 9, 4), (4, 8), (4, 9)]),
    Set([(3, 8)]),
    Set([(5, 8)]),
    Set([(5, 9), (6, 8, 3), (6, 9), (7, 8), (7, 9, 5)]),
    Set([(4, 6), (4, 7), (5, 6), (5, 7, 5), (6, 7)]),
    Set([(5, 5, 4), (6, 5), (6, 6), (7, 4), (7, 5, 2)]),
    Set([(5, 2), (5, 3, 5), (6, 3), (6, 4), (7, 3)]),
    Set([(3, 3, 4), (3, 4), (4, 4, 1), (4, 5), (5, 4)]),
    Set([(3, 2), (4, 1), (4, 2), (4, 3), (5, 1, 4)]),
    Set([(6, 1), (6, 2), (7, 1), (7, 2)]),
    Set([(7, 6), (7, 7)])
]

# grid7x9, backtracking_counter, time = SuguruSolver.solve(suguru7x9, 7, 9, false)

for i in 1:size
    grid7x9, backtracking_counter, time = SuguruSolver.solve(suguru7x9, 7, 9, false)
    println(backtracking_counter, "; ", time)
end
println()




suguru10x15 = [
    Set([(1,1), (1,2,6), (1,3), (2,2), (2,3,1), (3,2)]),
    Set([(1,4), (2,4), (2,5,6), (3,5), (4,4), (4,5)]),
    Set([(1,5), (1,6), (2,6,5), (3,6), (4,6), (4,7)]),
    Set([(1,7), (1,8), (1,9,3), (1,10), (2,8)]),
    Set([(1,11), (2,11), (2,12,2), (3,12), (4,12,4), (4,11)]),
    Set([(1,12), (1,13), (1,14,1), (1,15), (2,15,2), (3,15)]),
    Set([(2,1), (3,1), (4,1), (5,1,6), (6,1), (7,1)]),
    Set([(4,2,2), (5,2), (6,2,5), (3,3,4), (4,3), (3,4)]),
    Set([(2,7), (3,7), (3,8), (4,8), (5,8,3), (5,7)]),
    Set([(2,9,4), (2,10), (3,9,1), (3,10), (3,11), (4,10,2)]),
    Set([(2,13), (2,14), (3,13), (4,13), (5,13), (5,14)]),
    Set([(3,14), (4,14), (4,15), (5,15,2), (6,15,5), (6,14)]),
    Set([(6,13), (7,13,6), (7,14,2), (7,15), (8,14), (8,15)]), 
    Set([(10,12), (10,13), (10,14), (10,15), (9,14,1), (9,15,5)]),
    Set([(7,12), (8,12), (8,13), (9,13)]),
    Set([(9,9), (10,9), (10,10), (10,11,1), (9,11,4), (9,12)]),
    Set([(10,8)]),
    Set([(8,8,5), (9,8), (8,9), (8,10), (9,10)]),
    Set([(8,1,4), (9,1), (10,1,2), (10,2,3), (10,3), (10,4,1)]),
    Set([(7,2), (7,3), (8,2), (9,2), (9,3)]),
    Set([(5,3), (6,3), (6,4), (7,4), (8,3), (8,4)]),
    Set([(7,5), (8,5), (9,4,4), (9,5,3), (9,6), (10,5)]),
    Set([(7,6), (8,6), (8,7), (9,7,6), (10,6,2), (10,7)]),
    Set([(5,4), (5,5), (5,6,1), (6,5), (6,6), (6,7)]),
    Set([(6,8,2), (6,9), (7,7), (7,8)]),
    Set([(4,9), (5,9), (5,10,1), (6,10,6), (7,9), (7,10)]),
    Set([(5,11), (5,12), (6,11), (6,12), (7,11,5), (8,11)])
]

solution10x15 = [
    "4" "6" "2" "3" "4" "1" "4" "1" "3" "5" "3" "5" "6" "1" "4"; 
    "2" "5" "1" "5" "6" "5" "6" "2" "4" "6" "1" "2" "4" "5" "2"; 
    "4" "3" "4" "3" "1" "3" "1" "5" "1" "5" "3" "5" "3" "1" "3"; 
    "5" "2" "6" "2" "4" "2" "6" "2" "4" "2" "6" "4" "2" "4" "6"; 
    "6" "1" "4" "5" "3" "1" "4" "3" "5" "1" "3" "1" "6" "1" "2"; 
    "3" "5" "3" "2" "4" "2" "6" "2" "4" "6" "4" "2" "5" "3" "5"; 
    "1" "2" "4" "5" "6" "1" "3" "1" "3" "2" "5" "3" "6" "2" "1"; 
    "4" "3" "6" "1" "2" "5" "4" "5" "4" "1" "6" "1" "4" "3" "4"; 
    "5" "1" "5" "4" "3" "1" "6" "2" "6" "3" "4" "3" "2" "1" "5"; 
    "2" "3" "6" "1" "5" "2" "3" "1" "5" "2" "1" "6" "4" "3" "2"
]

# grid10x15, backtracking_counter, time = SuguruSolver.solve(suguru10x15, 10, 15, false)
# @assert solution10x15 == grid10x15

for i in 1:size
    grid10x15, backtracking_counter, time = SuguruSolver.solve(suguru10x15, 10, 15, false)
    println(backtracking_counter, "; ", time)
end
println()